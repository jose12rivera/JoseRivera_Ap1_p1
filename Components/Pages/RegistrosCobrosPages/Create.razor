@page "/Cobros/Create"
@rendermode InteractiveServer
@inject NavigationManager navigationManager
@inject CobrosServices cobrosServices
@inject PrestamosServices prestamosServices
@inject DeudoresServices deudoresServices

<EditForm Model="cobro" OnValidSubmit="Guardar">
    <DataAnnotationsValidator />
    <ValidationSummary/>
    <div class="container">
        <div class="card shadow-lg mt-3">
            <div class="card-header">
                <h5>Registro Cobros</h5>
            </div>

            <div class="card-body">
                <div class="row">
                    <div class="col-md-4 mb-5">
                        <label for="CobroId" class="form-label"><strong>CobroId:</strong></label>
                        <div class="input-group">
                            <InputNumber @bind-Value="cobro.CobroId" class="form-control" style="font-size: 0.8rem;" aria-describedby="botonBuscar" />
                            <button class="btn btn-outline-primary" type="button" id="botonBuscar" @onclick="Buscar">
                                <span class="bi bi-search"></span>
                            </button>
                        </div>
                    </div>
                </div>

                @* Fecha *@
                <div class="col-md-2 mb-5">
                    <label for="Fecha" class="form-label"><strong>Fecha:</strong></label>
                    <InputDate @bind-Value="cobro.Fecha" class="form-control" />
                    <ValidationMessage For="@(() => cobro.Fecha)" />
                </div>

                <div class="mb-3 row">
                    <div class="col-md-6">
                        <label for="Deudor" class="col-form-label"><strong>Deudor:</strong></label>
                        <select @onchange="OnDeudorSelected" class="form-control">
                            <option value="0">Seleccione un deudor</option>
                            @foreach (var deudor in deudor)
                            {
                                <option value="@deudor.DeudorId">@deudor.Nombres</option>
                            }
                        </select>
                        <ValidationMessage For="@(() => cobro.DeudorId)" />
                    </div>
                </div>

                @* Monto *@
                <div class="col-md-3 mb-5">
                    <label for="Monto" class="form-label"><strong>Monto:</strong></label>
                    <InputNumber @bind-Value="cobro.Monto" class="form-control" />
                    <ValidationMessage For="@(() => cobro.Monto)" />
                </div>

                <div class="border border-success p-3 mt-3">

                    <h5 class="card-header">Registro CobrosDetalle</h5>

                    <div class="card-body">
                        @if (Agregar)
                        {
                            <div class="alert alert-info" role="alert">
                                Se agregó el cobro.
                            </div>
                        }

                        <div class="row mb-3">
                            @*  PrestamoId *@
                            <div class="col-md-4 mb-3">
                                <label class="form-label"><strong>PrestamoId</strong></label>
                                <InputSelect class="form-control" @bind-Value="selectedPrestamoId">
                                    <option value="0" selected disabled>Elija una opción</option>
                                    @foreach (var prestamo in ListaPrestamos)
                                    {
                                        <option value="@prestamo.PrestamoId">@prestamo.PrestamoId - @prestamo.Concepto - Monto: @prestamo.Monto</option>
                                    }
                                </InputSelect>
                            </div>

                            @*  ValorCobrado *@
                            <div class="col-md-4 mb-3">
                                <label class="form-label"><strong>Valor Cobrado:</strong></label>
                                <InputNumber @bind-Value="cobrosDetalle.ValorCobrado" class="form-control" />
                                <ValidationMessage For="@(() => cobrosDetalle.ValorCobrado)" />
                            </div>

                            <div class="col-md-4 mb-3 d-flex align-items-end">
                                <button type="button" @onclick="AgregarDetalle" class="btn btn-outline-primary">
                                    <span class="bi bi-plus"></span>
                                    Agregar
                                </button>
                            </div>
                        </div>



                        <table class="table table-light table-bordered">
                            <thead class="table table-striped text-center">
                                <tr>
                                    <th>DetalleId</th>
                                    <th>CobroId</th>
                                    <th>PrestamoId</th>
                                    <th>ValorCobrado</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var detalle in ListacobroDetalle)
                                {
                                    <tr>
                                        <td>@detalle.DetalleId</td>
                                        <td>@detalle.CobroId</td>
                                        <td>@detalle.PrestamoId</td>
                                        <td>@detalle.ValorCobrado</td>
                                        <td class="text-center">
                                            <button class="btn btn-outline-dark" @onclick="() => EliminarDetalle(detalle)">
                                                <span class="bi bi-trash" style="color: black;"></span> Eliminar
                                            </button>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>

                    </div>
                </div>
            </div>
        </div>

        @if (Alerta)
        {
            <div class="alert alert-success" role="alert">
                Se guardaron los detalles del cobro.
            </div>
        }

        <div class="card-footer align: justify-content-center text-center">
            <div class="btn-group">
                <button type="button" @onclick="Nuevo" class="btn btn-outline-secondary">
                    <span class="bi bi-plus"></span>
                    Nuevo
                </button>
                <button type="submit" class="btn btn-outline-success">
                    <span class="bi bi-floppy"></span>
                    Guardar
                </button>
                <button type="button" @onclick="Volver" class="btn btn-outline-primary">
                    <span class="bi bi-arrow-left"></span>
                    Volver
                </button>
            </div>
        </div>
    </div>
</EditForm>

@code {
    [Parameter]
    public int CobroId { get; set; }
    public Cobros cobro { get; set; } = new Cobros();
    public CobrosDetalle cobrosDetalle { get; set; } = new CobrosDetalle();
    public List<CobrosDetalle> ListacobroDetalle { get; set; } = new List<CobrosDetalle>();
    public List<Deudores> deudor { get; set; } = new List<Deudores>();
    public List<Prestamos> ListaPrestamos { get; set; } = new List<Prestamos>();
    private int selectedDeudorId;
    private int selectedPrestamoId;
    private bool Alerta;
    private bool Agregar;
    private bool existe;
    protected override async Task OnInitializedAsync()
    {
        deudor = await deudoresServices.ObtenerDeudoresConPrestamos();
        
    }

    public async Task Nuevo()
    {
        cobrosDetalle = new CobrosDetalle();
        cobro = new Cobros();
        existe = false;

    }
   

    public async Task Buscar()
    {
        existe = false;
        var encontrado = await cobrosServices.Buscar(cobro.CobroId);
        if (encontrado != null)
        {
            cobro = encontrado;
        }
        else
        {
            await Nuevo();
        }
    }

    public async Task<bool> Validar()
    {
        existe=await cobrosServices.Existe(cobro.CobroId);
        return !existe;
    }

    public async Task Guardar()
    {
        if (!await Validar())
        {
            return;
        }
        cobro.CobrosDetalle = ListacobroDetalle;
        var guardado = await cobrosServices.Guardar(cobro);
        if (guardado)
        {
            Alerta = true;
        }
    }
    private async Task OnDeudorSelected(ChangeEventArgs e)
    {
        int selectedDeudorId = Convert.ToInt32(e.Value);
        cobro.DeudorId = selectedDeudorId;

        if (selectedDeudorId > 0)
        {

            ListaPrestamos = await cobrosServices.CargarPrestamosPorDeudorAsync(selectedDeudorId);

            if (ListaPrestamos != null && ListaPrestamos.Any())
            {

                cobro.Monto = ListaPrestamos.FirstOrDefault()?.Monto ?? 0;
            }
        }
    }
    public void EliminarDetalle(CobrosDetalle detalle)
    {
        ListacobroDetalle.Remove(detalle);
    }

    public void AgregarDetalle()
    {
        
       
            ListacobroDetalle.Add(new CobrosDetalle
                {
                    DetalleId = cobrosDetalle.DetalleId,
                    CobroId = cobro.CobroId,
                    PrestamoId = selectedPrestamoId,
                    ValorCobrado = cobrosDetalle.ValorCobrado
                });
            cobrosDetalle = new CobrosDetalle();
        

            
        
    }

    public void Volver()
    {
        navigationManager.NavigateTo("/Cobros/Index");
    }
}
