@page "/Cobros/Create"
@rendermode InteractiveServer
@inject NavigationManager navigationManager
@inject CobrosServices cobrosServices
@inject PrestamosServices prestamosServices
@using JoseRivera_Ap1_p1.DAL
@using Microsoft.EntityFrameworkCore

<EditForm Model="cobro" OnValidSubmit="Guardar">
    <DataAnnotationsValidator />
   
    <div class="container">
        <div class="card shadow-lg mt-3">
            <div class="card-header text-center">
                <h5 class="card-header ">Registro Cobros</h5>
            </div>
            
            <div class="card-body">
                @* CobroId *@
                <div class="row">
                    <div class="col-md-8 mb-5">
                        <label for="CobroId" class="form-label"><strong>CobroId:</strong></label>
                        <div class="input-group">
                            <div style="width: 40%; height: 1mm;">
                                <InputNumber @bind-Value="cobro.CobroId" class="form-control" style="font-size: 0.8rem;" aria-describedby="bottonbuscar" />
                            </div>
                        </div>
                    </div>
                </div>
                @* Fecha *@
                <div class="mb-5">
                    <label for="Fecha" class="form-label"><strong>Fecha:</strong></label>
                    <InputDate @bind-Value="cobro.Fecha" class="form-control" />
                    <ValidationMessage For="@(() => cobro.Fecha)" />
                </div>

                <div class="mb-3 row">
                    <div class="col-sm-6">
                        <label for="Deudor" class="col-form-label">Deudor:</label>
                        <select @onchange="OnDeudorSelected" class="form-control">
                            <option value="0">Seleccione un deudor</option>
                            @foreach (var deudor in deudor)
                            {
                                <option value="@deudor.DeudorId">@deudor.Nombres</option>
                            }
                        </select>
                        <ValidationMessage For="@(() => cobro.DeudorId)" />
                    </div>
                    @* Monto *@
                    <div class="mb-5">
                        <label for="Monto" class="form-label"><strong>Monto:</strong></label>
                        <InputNumber @bind-Value="cobro.Monto" class="form-control" />
                        <ValidationMessage For="@(() => cobro.Monto)" />
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="container">
        <div class="card shadow-lg mt-3">
            <div class="card-header text-center">
                <h5 class="card-header ">Registro CobroDetalle</h5>
            </div>

            <div class="container">
                <div class="card-body">
                    <div class="col-md-10 text-end">
                        <button type="button" @onclick="AgregarDetalle" class="btn btn-outline-success">
                            <span class="bi bi-plus mt-3"></span>
                            Agregar
                        </button>
                    </div>
                    @if (Agregar)
                    {

                        <div class="alert alert-info" role="alert">
                            se agrego el Cobros.
                        </div>
                    }

                    @* DetalleId *@
                    <div class="row">
                        <div class="col-md-8 mb-5">
                            <label for="DetalleId" class="form-label"><strong>DetalleId:</strong></label>
                            <div class="input-group">
                                <div style="width: 40%; height: 1mm;">
                                    <InputNumber @bind-Value="cobroDetalle.DetalleId" class="form-control" style="font-size: 0.8rem;" aria-describedby="bottonbuscar" />
                                </div>
                            </div>
                        </div>
                    </div>

                    @* CobroId *@
                    <div class="mb-5">
                        <label><strong>CobroId:</strong></label>
                        <InputNumber @bind-Value="cobroDetalle.CobroId" class="form-control" />
                        <ValidationMessage For="@(() => cobroDetalle.CobroId)" />
                    </div>

                    @* PrestamoId *@
                    <div class="mb-5">
                        <label><strong>PrestamoId:</strong></label>
                        <InputNumber @bind-Value="cobroDetalle.PrestamoId" class="form-control" />
                        <ValidationMessage For="@(() => cobroDetalle.PrestamoId)" />
                    </div>

                    @* ValorCobrado *@
                    <div class="mb-5">
                        <label><strong>ValorCobrado:</strong></label>
                        <InputNumber @bind-Value="cobroDetalle.ValorCobrado" class="form-control" />
                        <ValidationMessage For="@(() => cobroDetalle.ValorCobrado)" />
                    </div>

                    <table class="table table-light table-bordered">
                        <thead class="table table-striped text-center">
                            <tr>
                                <th>DetalleId</th>
                                <th>CobroId</th>
                                <th>PrestamoId</th>
                                <th>ValorCobrado</th>
                                <th>Eliminar</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var detalle in ListacobroDetalle)
                            {
                                <tr>
                                    <td>@detalle.DetalleId</td>
                                    <td>@detalle.CobroId</td>
                                    <td>@detalle.PrestamoId</td>
                                    <td>@detalle.ValorCobrado</td>
                                    <td class="text-center">
                                        <a class="btn btn-outline-danger bi bi-trash" @onclick="() => EliminarDetalle(detalle)"></a>
                                       
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
    @if (Alerta)
    {

        <div class="alert alert-success" role="alert">
            se guardo el Cobro Detalles.
        </div>
    }
    <div class="card-footer justify-content-center">
        <div class="btn-group">
            <button type="submit" class="btn btn-outline-success">
                <span class="bi bi-floppy mt-3"></span>
                Guardar
            </button>

            <button type="button" @onclick="Volver" class="btn btn-outline-primary">
                <span class="bi bi-arrow-left mt-3"></span>
                Volver
            </button>
        </div>
    </div>
</EditForm>

@code {
    [Parameter]
    public int CobroId { get; set; }
    public Cobros cobro { get; set; } = new Cobros();
    public CobroDetalle cobroDetalle { get; set; } = new CobroDetalle();
    public List<CobroDetalle> ListacobroDetalle { get; set; } = new List<CobroDetalle>();
    public List<Deudores> deudor { get; set; } = new List<Deudores>();
    private bool Alerta;
    private bool existe = false;
    private bool Agregar;

    public async Task Nuevo()
    {
        cobro = new Cobros();
        cobroDetalle = new CobroDetalle();
        existe = false;
    }

    public async Task Buscar()
    {
        existe = false;
        var encontrado = await cobrosServices.Buscar(cobro.CobroId);
        if (encontrado != null)
        {
            cobro = encontrado;
        }
        else
        {
            await Nuevo();
        }
    }

    public async Task<bool> Validar()
    {
        existe = await cobrosServices.Existe(cobro.CobroId);
        return !existe;
    }

    public async Task Guardar()
    {
        cobro.CobroDetalles = ListacobroDetalle;
        if (!await Validar())
        {
            return;
        }

        var guardado = await cobrosServices.Guardar(cobro);
        if (guardado)
        {
            Alerta = true;
        }
    }

    private async Task OnDeudorSelected(ChangeEventArgs e)
    {
        int selectedDeudorId = Convert.ToInt32(e.Value);
        cobro.DeudorId = selectedDeudorId;

        if (selectedDeudorId > 0)
        {

            var prestamo = await cobrosServices.ObtenerPrestamoPorDeudorId(selectedDeudorId);
            if (prestamo != null)
            {

                cobro.Monto = prestamo.Monto ?? 0;
            }
        }
    }
    protected override async Task OnInitializedAsync()
    {
        deudor = await cobrosServices.ObtenerDeudoresConPrestamos();
    }

    public async Task EliminarDetalle(CobroDetalle detalle)
    {
        ListacobroDetalle.Remove(detalle);
      
    }

    public async Task AgregarDetalle()
    {
        ListacobroDetalle.Add(new CobroDetalle
            {
                DetalleId = cobroDetalle.DetalleId,
                CobroId = cobro.CobroId,
                PrestamoId = cobroDetalle.PrestamoId,
                ValorCobrado = cobroDetalle.ValorCobrado
            });
       
       Agregar= true;
        cobroDetalle = new CobroDetalle();
       
    }

    public async Task Volver()
    {
        navigationManager.NavigateTo("/Cobros/Index");
    }
}
